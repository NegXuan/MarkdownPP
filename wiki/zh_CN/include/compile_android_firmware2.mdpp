{# ~~~~这一句是注释，为了排版，不要删除，不要理会~~~~~ #}

{%- if board_name == "Firefly-RK3399" -%}
*    编译 kernel：

```
cd ~/proj/firefly-rk3399/kernel/
make ARCH=arm64 firefly_defconfig
make -j8 ARCH=arm64 rk3399-firefly.img
```

*    编译 uboot：

```
cd ~/proj/firefly-rk3399/u-boot/
make rk3399_box_defconfig
make ARCHV=aarch64 -j8
```

* 编译 Android：

```
cd ~/proj/firefly-rk3399/
source build/envsetup.sh
lunch rk3399_firefly_box-userdebug
make -j8
./mkimage.sh
```

## 打包成统一固件 update.img

编译完可以用 Firefly 官方的脚本打包成统一固件，执行如下命令：

```
./FFTools/mkupdate/mkupdate.sh update
```

打包完成后将在 `rockdev/Image-rk3399_firefly_box/` 下生成统一固件：`update.img`

在 Windows 下打包统一固件 `update.img` 也很简单，将编译生成的文件拷贝到 AndroidTool 的 `rockdev\Image` 目录中，然后运行 `rockdev` 目录下的 `mkupdate.bat` 批处理文件即可创建 `update.img` 并存放到 `rockdev\Image` 目录里。
{% endif %}




{%- if board_name == "AIO-3399J" -%}
*    编译 kernel：

```
cd ~/proj/firefly-rk3399/kernel/
make ARCH=arm64 firefly_defconfig
make -j8 ARCH=arm64 rk3399-firefly-aio.img
```

*    编译 uboot：

```
cd ~/proj/firefly-rk3399/u-boot/
make rk3399_box_defconfig
make ARCHV=aarch64 -j8
```

* 编译 Android：

```
cd ~/proj/firefly-rk3399/
source build/envsetup.sh
lunch rk3399_firefly_aio_box-userdebug
make -j8
./mkimage.sh
```

## 打包成统一固件 update.img

编译完可以用 Firefly 官方的脚本打包成统一固件，执行如下命令：

```
./FFTools/mkupdate/mkupdate.sh update
```

打包完成后将在 `rockdev/Image-rk3399_firefly_aio_box/` 下生成统一固件：`update.img`

在 Windows 下打包统一固件 `update.img` 也很简单，将编译生成的文件拷贝到 AndroidTool 的 `rockdev\Image` 目录中，然后运行 `rockdev` 目录下的 `mkupdate.bat` 批处理文件即可创建 `update.img` 并存放到 `rockdev\Image` 目录里。
{% endif %}





{%- if board_name == "AIO-3399C" -%}
*    编译 kernel：

```
cd ~/proj/firefly-rk3399/kernel/
make ARCH=arm64 firefly_defconfig
标准版：make -j8 ARCH=arm64 rk3399-firefly-aioc.img
AI  版：make -j8 ARCH=arm64 rk3399-firefly-aioc-ai.img
```

*    编译 uboot：

```
cd ~/proj/firefly-rk3399/u-boot/
make rk3399_box_defconfig
make ARCHV=aarch64 -j8
```

* 编译 Android：

```
cd ~/proj/firefly-rk3399/
source build/envsetup.sh
标准版：lunch rk3399_firefly_aioc_box-userdebug
AI  版：lunch rk3399_firefly_aioc_ai_box-userdebug
make -j8
./mkimage.sh
```

## 打包成统一固件 update.img

编译完可以用 Firefly 官方的脚本打包成统一固件，执行如下命令：

```
./FFTools/mkupdate/mkupdate.sh update
```

打包完成后将在 `rockdev/Image-rk3399_firefly_box/` 下生成统一固件：`update.img`

AI 版则会在 `rockdev/Image-rk3399_firefly_aioc_ai_box/` 下生成。

在 Windows 下打包统一固件 `update.img` 也很简单，将编译生成的文件拷贝到 AndroidTool 的 `rockdev\Image` 目录中，然后运行 `rockdev` 目录下的 `mkupdate.bat` 批处理文件即可创建 `update.img` 并存放到 `rockdev\Image` 目录里。
{% endif %}
